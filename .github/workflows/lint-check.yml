name: CI Checks

on:
  pull_request:
    branches: [main, develop]
  push:
    branches: [main]
  workflow_dispatch:

env:
  NEXT_TELEMETRY_DISABLED: 1
  NODE_OPTIONS: --max-old-space-size=4096

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.1'
          cache: 'npm'
          
      - name: Verify Node version
        run: |
          node_version=$(node -v)
          echo "Node version: $node_version"
          if [[ ! "$node_version" =~ ^v20\.1[1-9] ]]; then
            echo "Error: Node version must be 20.11.x or higher (got $node_version)"
            exit 1
          fi

      - name: Install dependencies
        run: |
          npm config set maxsockets 5
          npm config set fetch-retries 3
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm ci --prefer-offline

      - name: Run Type Check
        run: npm run type-check

      - name: Run ESLint
        run: npm run lint

      - name: Run Prettier Check
        run: npm run format:check

      - name: Guard - forbid font hardcoding
        run: |
          set -e
          HITS=$(git grep -nI "Nanum Pen Script" -- \
            ":(exclude)node_modules" \
            ":(exclude).next" \
            ":(exclude)app/api/**" \
            -- "*.scss" "*.css" "*.js" "*.jsx" "*.ts" "*.tsx" || true)
          if [ -n "$HITS" ]; then
            echo "$HITS"
            echo "Do not hardcode font name. Use CSS var (--font-nanum-pen-script)." >&2
            exit 1
          fi

      - name: Guard - react-pdf isolated to API route
        run: |
          set -e
          HITS=$(git grep -nI "@react-pdf/renderer" -- \
            ":(exclude)node_modules" \
            ":(exclude).next" \
            ":(exclude)app/api/certificates/generate/**" \
            -- "*.js" "*.jsx" "*.ts" "*.tsx" || true)
          if [ -n "$HITS" ]; then
            echo "$HITS"
            echo "react-pdf must be isolated to app/api/certificates/generate/route.*" >&2
            exit 1
          fi

      - name: Run Build Test
        run: npm run build

      - name: Run Tests with Coverage
        env:
          NODE_OPTIONS: --experimental-vm-modules
          CI: true
        run: |
          mkdir -p artifacts/test-reports
          mkdir -p artifacts/coverage
          npm run test:ci
          
      - name: Check Coverage Thresholds
        run: |
          echo "Checking coverage thresholds..."
          # Jest will fail if coverage thresholds are not met
          # This is configured in jest.config.js
          
      - name: Guard - No test.skip allowed
        run: |
          set -e
          HITS=$(git grep -nI "test\.skip\|describe\.skip\|it\.skip\|xit\|xdescribe" -- \
            ":(exclude)node_modules" \
            ":(exclude).next" \
            -- "*.test.js" "*.test.ts" "*.spec.js" "*.spec.ts" || true)
          if [ -n "$HITS" ]; then
            echo "❌ Found skipped tests:"
            echo "$HITS"
            echo ""
            echo "Skipped tests are not allowed in CI. Please fix or remove them."
            exit 1
          fi
          echo "✅ No skipped tests found"

      - name: Upload test artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: test-artifacts
          path: |
            artifacts/test-reports
            coverage/
          if-no-files-found: ignore
          retention-days: 7
          
      - name: Comment Coverage Report (PR only)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const coveragePath = path.join(process.cwd(), 'coverage', 'coverage-summary.json');
              if (fs.existsSync(coveragePath)) {
                const coverage = JSON.parse(fs.readFileSync(coveragePath, 'utf8'));
                const total = coverage.total;
                
                const comment = `## 📊 Coverage Report
                
                | Type | Coverage | Threshold |
                |------|----------|-----------|
                | Lines | ${total.lines.pct.toFixed(2)}% | 65% |
                | Statements | ${total.statements.pct.toFixed(2)}% | 65% |
                | Functions | ${total.functions.pct.toFixed(2)}% | 60% |
                | Branches | ${total.branches.pct.toFixed(2)}% | 50% |
                
                ${total.lines.pct >= 65 ? '✅' : '❌'} Coverage requirements ${total.lines.pct >= 65 ? 'met' : 'not met'}`;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: comment
                });
              }
            } catch (error) {
              console.log('Could not post coverage comment:', error);
            }
